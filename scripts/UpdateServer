#!/bin/bash
#
# GamePanelX
# Remote scripts v3.0.13
#
# Update a Game/Voice server
#

#
# Example usage:
# ./UpdateServer -u user123 -t game -i 192.168.10.10 -p 27015 -o './steam -command update ...'
#
srv_username=
srv_ip=
srv_port=
srv_pidfile=
update_cmd=
callback_url=
cback="wget -qO-"
steam_game=
steam_login_user=
steam_login_pass=
steam_login_code=

while getopts "u:i:p:P:o:c:g:d:e:f:" OPTION
do
     case $OPTION in
        u)
             	srv_username=$OPTARG
             	;;
        i)
             	srv_ip=$OPTARG
             	;;
        p)
             	srv_port=$OPTARG
             	;;
        P)
             	srv_pidfile=$OPTARG
             	;;
        o)
             	update_cmd=$OPTARG
             	;;
        c)
             	callback_url=$OPTARG
             	;;
        g)
                steam_game=$OPTARG
                ;;
        d)
                steam_login_user=$OPTARG
                ;;
        e)
                steam_login_pass=$OPTARG
                ;;
        f)
                steam_login_code=$OPTARG
                ;;
        ?)
             	exit
             	;;
     esac
done

if [[ "$srv_username" == "" || "$srv_ip" == "" || "$srv_port" == "" || "$update_cmd" == "" ]]
then
    echo "UpdateServer: Required settings were left out. Exiting."
    exit
fi

# Stop server, suppress "success" message
/usr/local/gpx/bin/Stop -u $srv_username -i $srv_ip -p $srv_port 2>&1 >> /dev/null

# Update callback
if [ "$callback_url" ]; then $cback "$callback_url&do=createsrv_status&status=updating" >> /dev/null; fi

# Setup
gpxdir=/usr/local/gpx/users/$srv_username/$srv_ip\:$srv_port
serverlog=/usr/local/gpx/logs/servers.log
#updatelog=$gpxdir/.gpxupdate.log
#echo > $updatelog
updatelog=$serverlog

# Real logging
echo "$(date) $(hostname) Update: Updating server $srv_ip:$srv_port for user $srv_username ..." >> $serverlog


# Begin update
#cd $gpxdir
#echo "#!/bin/bash" > .gpxupdate
#echo $update_cmd >> .gpxupdate
#chmod u+x .gpxupdate
#nice -n 19 ./.gpxupdate >> $updatelog 2>&1 &
#pid=$!
#echo $pid > $gpxdir/.gpxupdatepid

# Move to correct directory
cd $gpxdir

# # Setup Steam update file if needed (no auth code, since that should have been handled on tpl setup)
# if [[ "$steam_login_user" && "$steam_login_pass" ]]
# then
#         echo "login $steam_login_user $steam_login_pass
# force_install_dir csgo
# app_update $steam_game
# quit" > .gpxsteamupdate.txt
# fi

############################################################

##
## Steam Updates: Initial login test (check for steam guard)
##

# Allow anonymous Steam logins
if [[ "$steam_login_user" == "anonymous" || "$steam_game" && "$steam_login_user" == "" ]]
then
	# Setup steam logging
        steam_log=$updatelog

	echo "$(date) $(hostname) Update: Using anonymous Steam login ..." >> $serverlog

	# Check missing libstdc++ (Usually CentOS 5)
        if [ "$(echo exit | linux32/steamcmd 2>&1 | grep "GLIBCXX_3.4.10' not found")" ]
        then
                # Download it if we dont have it
                if [ ! -f linux32/libstdc++.so.6 ]
                then
                        echo "SteamCMDInstall: ($(date)) Downloading libstdc++.so.6 ..." >> $steam_log
                        wget -q "http://gamepanelx.com/files/libstdc++.so.6" -O linux32/libstdc++.so.6
                fi

                if [ ! -f linux32/libstdc++.so.6 ]
                then
                        echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually (https://developer.valvesoftware.com/wiki/SteamCMD#32-bit_libraries_on_64-bit_Linux_systems).  Exiting."
                        echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually.  Exiting." >> $steam_log
                        exit
                fi

                export LD_LIBRARY_PATH=linux32/
        fi

        echo "login anonymous
force_install_dir csgo
app_update $steam_game
quit" > .gpxsteamupdate.txt

# Normal Steam login
else
	echo "$(date) $(hostname) Update: Using authenticated Steam login ..." >> $serverlog

#if [[ "$steam_login_user" && "$steam_login_pass" ]]
#then
	# Setup steam logging
	steam_log=$updatelog

	echo "login $steam_login_user $steam_login_pass
quit" > .gpxsteamupdate.txt

	# Check missing libstdc++ (Usually CentOS 5)
	if [ "$(echo exit | linux32/steamcmd 2>&1 | grep "GLIBCXX_3.4.10' not found")" ]
	then
		# Download it if we dont have it
		if [ ! -f linux32/libstdc++.so.6 ]
		then
			echo "SteamCMDInstall: ($(date)) Downloading libstdc++.so.6 ..." >> $steam_log
			wget -q "http://gamepanelx.com/files/libstdc++.so.6" -O linux32/libstdc++.so.6
		fi

		if [ ! -f linux32/libstdc++.so.6 ]
		then
			echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually (https://developer.valvesoftware.com/wiki/SteamCMD#32-bit_libraries_on_64-bit_Linux_systems).  Exiting."
			echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually.  Exiting." >> $steam_log
			exit
		fi

		export LD_LIBRARY_PATH=linux32/
	fi


	# Initial run through
	steam_auth="$(echo quit | STEAMEXE=steamcmd ./steam.sh +runscript .gpxsteamupdate.txt 2>&1)"

	# Has Steam Guard
	if [ "$(echo $steam_auth | grep 'not been authenticated for your account using Steam Guard')" ]
	then
		# Check if we have a code
		if [ "$steam_login_code" ]
		then
			echo "set_steam_guard_code $steam_login_code
login $steam_login_user $steam_login_pass
quit" > .gpxsteamupdate.txt
		# No code, exit
		else
			echo "SteamCMDInstall: This Steam account has Steam Guard active.  Enter the Steam Guard code on the Settings page and try again.  Exiting."
			echo "SteamCMDInstall: This Steam account has Steam Guard active.  Enter the Steam Guard code on the Settings page and try again.  Exiting." >> $steam_log
			exit
		fi
	# Bad password
	elif [ "$(echo $steam_auth | grep 'Login Failure: Invalid Password')" ]
	then
		echo "SteamCMDInstall: Bad password for this Steam account.  Please check the Steam password in Settings and try again.  Exiting."
		echo "SteamCMDInstall: Bad password for this Steam account.  Please check the Steam password in Settings and try again.  Exiting." >> $steam_log
		exit
	# Check successful login
	elif [ "$(echo $steam_auth | grep 'Steam Public...Success')" ]
	then
		# Setup update file without steam guard
		echo "login $steam_login_user $steam_login_pass
force_install_dir csgo
app_update $steam_game
quit" > .gpxsteamupdate.txt

	fi
fi

########################################################################

# Setup update
echo "#!/bin/bash" > .gpxupdate
echo -e $update_cmd >> .gpxupdate
chmod u+x .gpxupdate


# No GNU Screen support
if [ "$(which screen 2>&1 | grep 'no screen in')" ]
then
	echo "$(date) $(hostname) Update: Warning: No GNU Screen found!  Please install screen to use all server features." >> $serverlog
	./.gpxupdate >> $updatelog 2>&1 &
	pid=$!
# Start update in GNU Screen so we can see console output
else
	screen -wipe >> /dev/null 2>&1
	screen -d -m -S "$srv_ip:$srv_port" ./.gpxupdate
	screen_pid="$(screen -list | grep "$srv_ip:$srv_port" | awk '{print $1}' | awk -F. '{print $1}')"
	pid="$(ps -ef | awk '{print $2,$3}' | grep "$screen_pid" | sort -n | tail -1 | awk '{print $1}')"
	echo $screen_pid > $gpxdir/.gpxscreen.pid
fi

#./.gpxupdate >> $updatelog 2>&1 &
#pid=$!


# Save update PID
echo $pid > $gpxdir/.gpxupdatepid


# Start checking if update is complete
if [ "$callback_url" ]
then
	while [ true ]
	do
    		# Check if complete
    		#if [ "$(ps aux | grep "$pid" | grep -v grep)" == "" ]

		# PID doesnt exist? Fail...
		if [ "$pid" == "" ]
		then
			echo "$(date) $(hostname) Update failed: No PID for update process found.  Screen PID was: $screen_pid.  Exiting. ($(date))" >> $updatelog
			$cback "$callback_url&do=createsrv_status&status=failed" >> /dev/null
			break
		# Completed
		elif [[ "$pid" && ! -e /proc/$pid ]]
                then
			echo "$(date) $(hostname) Update: Success: Update completed.  ($(date))" >> $updatelog
                        $cback "$callback_url&do=createsrv_status&status=complete" >> /dev/null

			echo "$(date) $(hostname) Update: Server update completed on $srv_ip:$srv_port for user $srv_username." >> $serverlog

                        break
		# Still running, wait...
		elif [[ "$pid" && -e /proc/$pid ]]
		then
			sleep 5
	    	# Something else happened
	    	else
			echo "$(date) $(hostname) Update failed: Something odd happened.  Screen PID was: $screen_pid, update PID was: $pid.  Exiting. ($(date))" >> $updatelog
			 echo "$(date) $(hostname) Update: Failed on $srv_ip:$srv_port for user $srv_username: Something odd happened.  Screen PID was: $screen_pid, update PID was: $pid.  Exiting." >> $serverlog

	        	$cback "$callback_url&do=createsrv_status&status=failed" >> /dev/null
                        break
	    	fi
	done >> /dev/null 2>&1 &
fi

echo "success"
