#!/bin/bash
#
# GamePanelX
# Remote scripts v3.0.11
#
# Steam Install Script (for newer SteamCMD)
# Steam(c) is a trademark owned by VALVe Corporation, and is in no way affiliated with GamePanelX.  These are simply scripts to work alongside their provided server tools.
#
# You only need -c to provide the code given by SteamGuard(c).  Turn SteamGuard off on your account to simplify things; you should have a dedicated steam account for this anyways.
#
# Example: ./SteamCMDInstall -g 740 -i 24 -l steamusr22 -p steampass1234 -c aBc3
#
tpl_id=
callback_url=
cback="wget -qO-"
steam_game=
steam_tmp=
steam_login_user=
steam_login_pass=
steam_login_code=
debug_on=

while getopts "i:u:g:l:p:c:d:" OPTION
do
     case $OPTION in
	i)
	     	tpl_id=$OPTARG
	     	;;
	u)
		callback_url=$OPTARG
	     	;;
        g)
             	steam_game=$OPTARG
             	;;
	l)
		steam_login_user=$OPTARG
		;;
	p)
		steam_login_pass=$OPTARG
		;;
	c)
		steam_login_code=$OPTARG
		;;
        d)
             	debug_on=$OPTARG
             	;;
        ?)
             	exit
             	;;
     esac
done

if [ "$tpl_id" == "" ]
then
	echo "SteamCMDInstall: No template ID provided.  Exiting."
	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
	exit
elif [ "$steam_game" == "" ]
then
	echo "SteamCMDInstall: No Steam app ID (-g) provided.  Exiting."
	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        exit
elif [[ "$steam_login_user" == "" || "$steam_login_pass" == "" ]]
then
	echo "SteamCMDInstall: No Steam Login provided!"
        $cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        exit
fi

# Get to the right directory
if [ ! -d $HOME/tmp/$tpl_id ]
then
        mkdir -p $HOME/tmp/$tpl_id
else
        rm -fr $HOME/tmp/$tpl_id/
        mkdir -p $HOME/tmp/$tpl_id
fi

# Setup path / CD to it
steam_tmp=$HOME/tmp/$tpl_id/
cd $steam_tmp

# Reset steam log
echo > $steam_tmp/.gpxsteam.log
steam_log=$steam_tmp/.gpxsteam.log


###################################################################################

# Fetch steamcmd
echo "SteamCMDInstall: ($(date)) Downloading steamcmd.tar.gz ..." >> $steam_log
wget -q "http://blog.counter-strike.net/wp-content/uploads/2012/04/steamcmd.tar.gz" -O steamcmd.tar.gz

if [ ! -f $steam_tmp/steamcmd.tar.gz ]
then
	echo "SteamCMDInstall: Failed to fetch steamcmd.tar.gz, exiting."
	echo "SteamCMDInstall: Failed to fetch steamcmd.tar.gz, exiting." >> $steam_log
	exit
fi

tar -zxf $steam_tmp/steamcmd.tar.gz
rm -f $steam_tmp/steamcmd.tar.gz
chmod u+x $steam_tmp/steam.sh $steam_tmp/linux32/steamcmd

# Check missing libstdc++ (Usually CentOS 5)
if [ "$(echo exit | $steam_tmp/linux32/steamcmd 2>&1 | grep "GLIBCXX_3.4.10' not found")" ]
then
	echo "SteamCMDInstall: ($(date)) Downloading libstdc++.so.6 ..." >> $steam_log
	wget -q "http://gamepanelx.com/files/libstdc++.so.6" -O $steam_tmp/linux32/libstdc++.so.6

	if [ ! -f $steam_tmp/linux32/libstdc++.so.6 ]
	then
		echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually (https://developer.valvesoftware.com/wiki/SteamCMD#32-bit_libraries_on_64-bit_Linux_systems).  Exiting."
		echo "SteamCMDInstall: Failed to fetch libstdc++.so.6, please install it manually.  Exiting." >> $steam_log
		exit
	fi

	export LD_LIBRARY_PATH=$steam_tmp/linux32/
fi

# Make sure its not still failing
#if [ "$(echo exit | $steam_tmp/linux32/steamcmd 2>&1 | grep "GLIBCXX_3.4.10' not found")" ]
#then
#	echo "SteamCMDInstall: Failed to find GLIBCXX_3.4.10.  Please install manually and try again (https://developer.valvesoftware.com/wiki/SteamCMD#32-bit_libraries_on_64-bit_Linux_systems).  Exiting."
#	echo "SteamCMDInstall: Failed to find GLIBCXX_3.4.10.  Please install manually and try again.  Exiting." >> $steam_log
#	exit
#fi

############################################################

##
## Initial login test (check for steam guard)
##
echo "SteamCMDInstall: ($(date))  Starting SteamCMD authentication check ..." >> $steam_log

echo "login $steam_login_user $steam_login_pass
quit" > $steam_tmp/update.txt

# Initial run through
steam_auth="$(echo quit | STEAMEXE=steamcmd ./steam.sh +runscript update.txt 2>&1)"

# Has Steam Guard
if [ "$(echo $steam_auth | grep 'not been authenticated for your account using Steam Guard')" ]
then
	# Check if we have a code
	if [ "$steam_login_code" ]
	then
		echo "set_steam_guard_code $steam_login_code
login $steam_login_user $steam_login_pass
quit" > $steam_tmp/update.txt
	# No code, exit
	else
		echo "SteamCMDInstall: This Steam account has Steam Guard active.  Enter the Steam Guard code on the Settings page and try again.  Exiting."
		echo "SteamCMDInstall: This Steam account has Steam Guard active.  Enter the Steam Guard code on the Settings page and try again.  Exiting." >> $steam_log
		exit
	fi
# Bad password
elif [ "$(echo $steam_auth | grep 'Login Failure: Invalid Password')" ]
then
	echo "SteamCMDInstall: Bad password for this Steam account.  Please check the Steam password in Settings and try again.  Exiting."
	echo "SteamCMDInstall: Bad password for this Steam account.  Please check the Steam password in Settings and try again.  Exiting." >> $steam_log
	exit
# Check successful login
elif [ "$(echo $steam_auth | grep 'Steam Public...Success')" ]
then
	# Setup update file without steam guard
        echo "login $steam_login_user $steam_login_pass
force_install_dir csgo
app_update $steam_game
quit" > $steam_tmp/update.txt

fi

########################################################################

##
## All authenticated, begin game installation
##
echo "SteamCMDInstall: ($(date))  SteamCMD is authed and ready, starting game $steam_game update ..." >> $steam_log

export STEAMEXE=steamcmd
STEAMEXE=steamcmd ./steam.sh +runscript update.txt >> $steam_log 2>&1 &
steam_pid=$!
touch $steam_tmp/.gpxsteam.pid
echo $steam_pid > $steam_tmp/.gpxsteam.pid


# Fork the checking on installation status, once done start template creation
while [ true ]
do
        # Check completed
        if [ "$(grep 'fully installed.' $steam_log)" ]
        then
		# Remote update script so clients dont have our steam details
		rm -f $steam_tmp/update.txt

		# Give path without $HOME, since CreateTemplate adds $HOME to what we give it
                this_path="tmp/$tpl_id"

                # Done, start template creation process ("success" will output from this so no need to echo again)
                echo "SteamCMDInstall: tpl_create_start" >> $steam_log
                echo "SteamCMDInstall: ($(date)) Beginning template creation process (Path: $this_path, TplID: $tpl_id ..." >> $steam_log

		if [ "$debug_on" ]; then add_debug=" -d yes"; else add_debug=""; fi

                $HOME/scripts/CreateTemplate -p $this_path -i $tpl_id -s yes -u "$callback_url" $add_debug

                break
                exit
	# Check failed
	elif [ "$(grep 'Failed' $steam_log)" ]
	then
		failed_info="$(grep 'Failed' $steam_log)"

		echo "SteamCMDInstall: Steam install failed ($failed_info)" >> $steam_log
        	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        	exit		
        # Not complete.  Update callback with steam install percentage every x seconds
        else
                # (this expects a modern `grep` which can handle basic regex)
                if [ "$callback_url" ]
                then
			cur_perc=$(tail $steam_log | awk '{print $6}' | grep '[0-9]\.[0-9]' | tail -1)

                        if [ "$last_perc" != "$cur_perc" ]
                        then
                                last_perc=$cur_perc
                                $cback "$callback_url&do=steam_progress&percent=$cur_perc" >> /dev/null
                        fi

                fi
        fi

        sleep 5
done >> /dev/null 2>&1 &
check_tpl_pid=$!

touch $steam_tmp/.gpxtplcheck.pid
echo $check_tpl_pid > $steam_tmp/.gpxtplcheck.pid


echo "success"
